{"version":3,"sources":["webpack:///./src/templates/tag-template.js"],"names":["TagTemplate","data","pageContext","path","tag","edges","allMarkdownRemark","pageTitle","title","slug"],"mappings":"4FAAA,oEA6DeA,UAtDK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KAChCC,EAAOF,EAAPE,IACAC,EAASJ,EAAKK,kBAAdD,MACDE,EAAS,0BAA6BH,EAA7B,IAEf,OACE,kBAAC,IAAD,CAAQI,MAAOD,EAAWE,KAAMN,GAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASE,MAAOA,EAAOG,MAAOD","file":"component---src-templates-tag-template-js-b1d0b8f6d8eb7b552492.js","sourcesContent":["import React from 'react';\nimport {graphql} from 'gatsby';\nimport PropTypes from 'prop-types';\nimport Courses from '../components/Courses';\nimport Layout from '../components/shared/Layout';\nimport Page from '../components/shared/Page';\n\nconst TagTemplate = ({data, pageContext, path}) => {\n  const {tag} = pageContext;\n  const {edges} = data.allMarkdownRemark;\n  const pageTitle = `All content tagged as \"${tag}\"`;\n\n  return (\n    <Layout title={pageTitle} slug={path}>\n      <Page>\n        <Courses edges={edges} title={pageTitle} />\n      </Page>\n    </Layout>\n  );\n};\n\nTagTemplate.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array.isRequired,\n    }),\n  }).isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nexport const query = graphql`\n  query TagPage($tag: String!, $coursesLimit: Int!, $coursesOffset: Int!) {\n    allMarkdownRemark(\n      limit: $coursesLimit\n      skip: $coursesOffset\n      sort: {fields: frontmatter___title}\n      filter: {\n        frontmatter: {\n          tags: {in: [$tag]}\n          template: {in: [\"course\", \"techtalk\"]}\n          draft: {ne: true}\n        }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          frontmatter {\n            title\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagTemplate;\n"],"sourceRoot":""}