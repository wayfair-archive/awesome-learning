{"componentChunkName":"component---src-templates-lesson-template-js","path":"/courses/Functions-and-Scope/scope","result":{"data":{"markdownRemark":{"id":"537b0a1d-b037-50a6-a404-5c56dd8fa99a","html":"","fields":{"slug":"/courses/Functions-and-Scope/scope","tagSlugs":["/tag/scope/","/tag/js-fundamentals/","/tag/function-and-block-scope/"]},"frontmatter":{"description":"In the previous section we learned about the dynamic context feature of JavaScript functions. Today we will explore the static _scope_ and the differences of scope vs context. We will demonstrate how scope _work_ directly by exploring some of the lesser known gotchas in JavaScript like \"hoisting\".","course":"Functions-and-Scope","tags":["Scope","JS Fundamentals","Function and Block Scope"],"title":"Scope","timeToCompletion":"~1 hour","videoLinks":["https://www.youtube.com/embed/sjyJBL5fkp8"],"preReadQuizLink":"https://docs.google.com/forms/d/e/1FAIpQLSeM4X1hctc26jxQr9-5gT3a9WOHpLy_6I2CymoUg1uGz4hOCw/viewform","defaultTab":"tests","readingLinks":[{"link":"https://hackernoon.com/understanding-javascript-scope-1d4a74adcdf5","description":"Scope is a powerful concept in JS - let's deepen our understanding.","title":"Understanding JavaScript Scope"}],"secondaryExerciseUrl":null,"preReadQuiz":{"description":null,"questions":[{"choices":[{"value":"The environment in which values, variables and expressions are \"visible\" and can be referenced."},{"value":"The value of \"this\" during function execution or the object to which the function belongs."},{"value":"The environment in which values and expressions can be defined."}]},{"choices":[{"value":"Dynamically, when functions are called or executed."},{"value":"Statically, when function declarations are parsed or evaluated."},{"value":"At runtime, when variables are assigned or referenced."}]}]}}}},"pageContext":{"slug":"/courses/Functions-and-Scope/scope"}},"staticQueryHashes":["3796714061","784018950"]}