{"componentChunkName":"component---src-templates-quiz-template-js","path":"/courses/Testing/component-testing-rtl/quiz","result":{"data":{"markdownRemark":{"id":"04f78562-5e77-5745-9e2d-8e9914292ebf","html":"","fields":{"slug":"/courses/Testing/component-testing-rtl","tagSlugs":["/tag/jest/","/tag/react-testing-library/"]},"frontmatter":{"title":"Component Testing with React Testing Library","preReadQuiz":{"description":"Take this quiz to test your understanding of React Testing Library!","questions":[{"codeSnippet":null,"correctChoices":[2,4],"description":"Which of these should be used for testing asynchronous behavior?","explanation":"When testing async behavior, always use the findBy* queries, which return a promise that resolves to the value of the element or elements you're querying for.","type":"checkbox","choices":[{"value":"getByText()"},{"value":"queryAllByRole()"},{"value":"findByDisplayValue()"},{"value":"queryByLabelText()"},{"value":"findAllByAltText()"}]},{"codeSnippet":null,"correctChoices":[1],"description":"True or false: When using React Testing Library, if you want to inspect an element in the console, console.log is the best method.","explanation":"React Testing Library provides a debug() method in the object returned by render(), which will print the mounted component's DOM to the console. You can pass individual nodes to debug() to print them individually, e.g. debug(getByText('Submit'))","type":"radio","choices":[{"value":"true"},{"value":"false"}]},{"codeSnippet":"<form>\n  <input placeholder=\"Name\" />\n  <button type=\"submit\">Submit</button>\n</form>\n","correctChoices":[0,1,4,5],"description":"Which of the following queries will return the button element in this code snippet?","explanation":"queryByText accepts either a string or regex. If you pass a string, it needs to be exact, unless you pass {exact: false} as the second argument. If you pass regex, you need to use the `i` flag to ignore case.","type":"checkbox","choices":[{"value":"queryByText('Submit')"},{"value":"queryByText(/submit/i)"},{"value":"queryByText('submit')"},{"value":"queryByText(/submit/)"},{"value":"queryByText('submit', {exact: false})"},{"value":"queryByRole('button')"}]},{"codeSnippet":null,"correctChoices":[1],"description":"Given the input `<input value=\"Hello\" />` - Which of the following is the correct way to simulate a change event on the input?","explanation":"`fireEvent` has methods for all HTML events, without the `on` prefix. The methods each take the element you're firing the event on as the first parameter, and a mock event as an optional 2nd parameter. When selecting an input, `queryByText` will not work - use `queryByDisplayValue` or `queryByPlaceholder` instead.","type":"radio","choices":[{"value":"queryByDisplayValue('Hello').fireEvent(change, {target: {value: 'Goodbye'}})"},{"value":"fireEvent.change(queryByDisplayValue('Hello'), {target: {value: 'Goodbye'}})"},{"value":"queryByText('Hello').fireEvent(change, {target: {value: 'Goodbye'}})"},{"value":"fireEvent.onChange(queryByDisplayValue('Hello'), {target: {value: 'Goodbye'}})"},{"value":"fireEvent.change(queryByText('Hello'), {target: {value: 'Goodbye'}})"}]}]}}}},"pageContext":{"slug":"/courses/Testing/component-testing-rtl"}},"staticQueryHashes":["784018950"]}