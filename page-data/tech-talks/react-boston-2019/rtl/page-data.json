{"componentChunkName":"component---src-templates-tech-talk-template-js","path":"/tech-talks/react-boston-2019/rtl","result":{"data":{"markdownRemark":{"id":"96f4c12c-8203-58a1-884b-03a1336108db","html":"","fields":{"slug":"/tech-talks/react-boston-2019/rtl","tagSlugs":["/tag/react/","/tag/react-boston/","/tag/react-hooks/","/tag/react-testing-library/","/tag/unit-testing/","/tag/jest/"]},"frontmatter":{"description":"If you had to rewrite your tests when writing a hook in your React application, then you're writing tests wrong.\n\nreact-testing-library is what it sounds like, but more importantly, it encourages writing tests in the way that your end users will be using your components.\n\nIn this talk, I will first introduce react-testing-library, what it is, what it encourages, and what it does best. I'll then dive into how to effectively test a react component, first a smaller component, then a \"larger\" component with redux, i18n dependencies, etc., then I will show all of the different APIs that react-testing-library provides, and how to effectively use them. Then, I'll show how to write effective tests across an entire application (writing reusable, effective tests that are not brittle).\n","date":"September 21, 2019","embedLink":"https://www.youtube.com/embed/BUXJIg2Wve4","group":"react-boston-2019","tags":["React","React Boston","React Hooks","React Testing Library","Unit testing","Jest"],"title":"Using React Testing Library to Write Stronger Tests","slides":"https://testingreactboston.netlify.com/about-me","speakers":[{"name":"Matt Crowder","title":"Software Engineer, Veeva Systems","twitter":"mcrowder65"}]}}},"pageContext":{"slug":"/tech-talks/react-boston-2019/rtl"}},"staticQueryHashes":["784018950"]}