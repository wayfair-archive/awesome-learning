{"componentChunkName":"component---src-templates-tag-template-js","path":"/tag/jest","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/jest-in-strict-mode","categorySlug":null},"frontmatter":{"title":"Jest in Strict Mode â€“ Finding and Preventing Flaky Tests","category":null,"description":"Have you ever ran into flaky tests? How about tests which pass but should not have? This is a story about how we wen't about finding these dangerous tests in a suite of over 13,000 tests and what tooling we've built to prevent them from coming back. Hopefully our story and tooling can help you on your own team, big or small.\n"}}},{"node":{"fields":{"slug":"/courses/Testing/","categorySlug":"/category/automated-testing/"},"frontmatter":{"title":"Testing","category":"Automated Testing","description":"Welcome to the Automated Testing course. Over the upcoming weeks you will dive into Front-End Testing using Jest, and eventually Enzyme or React Testing Library. By the end of this course, you will know how to test React components, simulate interactions with them, and test how they behave in response to these interactions."}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/rtl","categorySlug":null},"frontmatter":{"title":"Using React Testing Library to Write Stronger Tests","category":null,"description":"If you had to rewrite your tests when writing a hook in your React application, then you're writing tests wrong.\n\nreact-testing-library is what it sounds like, but more importantly, it encourages writing tests in the way that your end users will be using your components.\n\nIn this talk, I will first introduce react-testing-library, what it is, what it encourages, and what it does best. I'll then dive into how to effectively test a react component, first a smaller component, then a \"larger\" component with redux, i18n dependencies, etc., then I will show all of the different APIs that react-testing-library provides, and how to effectively use them. Then, I'll show how to write effective tests across an entire application (writing reusable, effective tests that are not brittle).\n"}}}]}},"pageContext":{"tag":"Jest","currentPage":0,"coursesLimit":10,"coursesOffset":0,"prevPagePath":"/tag/jest","nextPagePath":"/tag/jest/page/1","hasPrevPage":false,"hasNextPage":false}},"staticQueryHashes":["784018950"]}