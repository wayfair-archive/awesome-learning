{"componentChunkName":"component---src-templates-tag-template-js","path":"/tag/java-script","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/react-and-web-platform-delta","categorySlug":null},"frontmatter":{"title":"Deconstructing React and The Web Platform Delta","category":null,"description":"For eons, web developers have paved the path forward for innovation on the web platform. We’ve spawned countless design patterns, APIs, and libraries, all which fill some gap to help us write resilient modern web applications. These early experimentations have often found their way into our native web platform. In the age of JavaScript compilers, React is no exception, and it boldly leaps forward with creative and opinionated solutions on how we productively write performant UI code. In this talk, we’ll deconstruct the virtual DOM, synthetic events, JSX and all the other things that make React unique, helping you understand the cost of this controversial web platform delta.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/hooks-hocs-tradeoffs","categorySlug":null},"frontmatter":{"title":"Hooks, HOCS, and Tradeoffs","category":null,"description":"React hooks have become widespread since their introduction, and React-Redux recently introduced a new hooks API as an alternative to the traditional `connect()` HOC. Many React developers have questions about how these approaches differ.  We'll look at some of the strengths, weaknesses, and tradeoffs for both hooks and HOCs in general, and what this means for React-Redux users specifically as they decide how to write their applications.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/large-codebase","categorySlug":null},"frontmatter":{"title":"I've Fallen Into a Large Codebase and I Can't Get Up!","category":null,"description":"Developers spend more time reading existing code than writing new code. Navigating codebases is especially important when joining new projects, or when investigating external libraries. Unfortunately, getting a full understanding of a system can be a slow process, especially in large codebases. Incomplete or inaccurate mental models contribute to bugs and slow development. Handmade architecture diagrams can help, but it is easy for these to drift out of sync from the code they originally described.\n\nAutomatically generated visualizations can help to untangle this complexity, but they aren't mainstream (yet). This talk will share a few existing tools and techniques for visualizing relationships in source code developed for other languages, such as Smalltalk and Java. We’ll examine how these \"old\" techniques could benefit modern Javascript/Typescript codebases. Next, we'll explore techniques currently available to React developers beyond the standard devtools, including automatic code annotation, state charts, annotated code maps, and network analysis tools to make sense of a file’s dependency tree. I'll close by sharing ideas for visual analysis from other fields that can be applied to understanding concepts in frontend code.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/jest-in-strict-mode","categorySlug":null},"frontmatter":{"title":"Jest in Strict Mode – Finding and Preventing Flaky Tests","category":null,"description":"Have you ever ran into flaky tests? How about tests which pass but should not have? This is a story about how we wen't about finding these dangerous tests in a suite of over 13,000 tests and what tooling we've built to prevent them from coming back. Hopefully our story and tooling can help you on your own team, big or small.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2018/react-and-graphql","categorySlug":null},"frontmatter":{"title":"React & GraphQL – Bringing Simplicity to Client Side Development","category":null,"description":"One of React’s stronger attributes is the component model which allows us to combine behavior and presentation of functional units as opposed to along the arbitrary technology focused separation previously used, but unfortunately had less to say about data needs. With GraphQL we can have an ideal final slide to allow our components to fully encapsulate all of their requirements while keeping things modular and reusable. In this talk we’ll cover both the theory and practice of client development with React and GraphQL, along the way highlighting the areas where we can even more strongly leverage its power and flexibility.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/react-and-elm","categorySlug":null},"frontmatter":{"title":"React and Elm Join Forces","category":null,"description":"The differences between Elm and React with Redux are often framed as a competition, but it doesn’t have to be that way. Coming to React as an experienced Elm developer, I’ll explore what the two share in order to help you better understand the design patterns behind both. I will talk about the problems that the Elm and Redux architectures solve.\n\nI will then outline how Elm's flow compares to Redux's unidirectional data flow, and describe the pros and cons I've seen different teams I've been on encounter when using Elm or React. I will also show how similar reducers in Redux are to Elm update functions, by doing a side-by-side comparison of the same component, built in both React with Redux and in Elm.\n\nFinally, handling synchronous events is built in to React, but there is no one way to handle side effects. I'll give an overview of the main options for React - thunks, sagas, and observables - and will introduce the audience to redux-loop, which borrows from Elm's commands. After this talk, you should have a better understanding of the choices behind the React-Redux and Elm architectures.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2018/react-romance","categorySlug":null},"frontmatter":{"title":"React – A Romance of Many Dimensions","category":null,"description":"Is VR an approachable medium for JavaScript developers? Can we, as front-end developers, use what we already know to build a 3D world? Can we use React to reach the 4th dimension? Yes! React360 is here to let us create delightful VR experiences in the browser.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2018/reasonml","categorySlug":null},"frontmatter":{"title":"ReasonML","category":null,"description":"Watch the keynote talk for React Boston 2018 on ReasonML, presented by Ken Wheeler!\n"}}}]}},"pageContext":{"tag":"JavaScript","currentPage":0,"coursesLimit":10,"coursesOffset":0,"prevPagePath":"/tag/java-script","nextPagePath":"/tag/java-script/page/1","hasPrevPage":false,"hasNextPage":false}},"staticQueryHashes":["784018950"]}