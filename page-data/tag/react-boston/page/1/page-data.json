{"componentChunkName":"component---src-templates-tag-template-js","path":"/tag/react-boston/page/1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/enforcing-design-system-with-eslint","categorySlug":null},"frontmatter":{"title":"Enforcing Your Design System with ESLint","category":null,"description":"Implementing a new design system on an existing application isn’t easy. Because updating an entire codebase in one go can be time consuming, we often like to think that we’ll update our codebase over time. But when development teams are very focused on building new features, it’s hard to remember to update old screens and pages. Codebases often end up with a mix of old and new design.\n\nWouldn't it be nice if we could use ESLint to remind us to update old code? In this lightning talk, I'll talk about how to write ESLint rules to enforce your design system on your codebase. I'll demonstrate how to write rules to:\n\n- Prevent using colors outside of your design system palette\n- Prevent using raw text and button components in favor of your design system components\n- Enforce that components in special directories (like pages or screens) follow the same UI patterns.\n\nThis talk will be in the context of a React Native project, but it's applicable to any React application.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/foundations-of-design-systems","categorySlug":null},"frontmatter":{"title":"Foundations of Design Systems","category":null,"description":"Design systems are in the world around us, from street signs to the layouts of grocery stores, \nand our products are no exception. In this talk we'll delve into the world of Design Systems and \nlearn what they are and what it takes to build one.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/from-react-to-native","categorySlug":null},"frontmatter":{"title":"From React to Native","category":null,"description":"Watch Laura González talk about using React Native in new, existing, and future code!\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2018/sketch-to-code","categorySlug":null},"frontmatter":{"title":"From Sketch to Code – Designing a Component Kit","category":null,"description":"Working on multiple enterprise projects that use the same components can get a little overwhelming. I will talk through how to create an effective workflow by showing examples of what worked and did not work for our team, from design QA to constant props. As well as how we tackled component documentation that stays up to date with API changes. Lastly, we will explore new ideas that we will want to explore like working with AirBnb's react-sketchapp.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/fullstack-type-safety","categorySlug":null},"frontmatter":{"title":"Full-stack Type Safety with React, GraphQL, and TypeScript","category":null,"description":"Listen to Robert Zhu talk about TypeScript, GraphQL, and type safety in a React application!\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/hooks-hocs-tradeoffs","categorySlug":null},"frontmatter":{"title":"Hooks, HOCS, and Tradeoffs","category":null,"description":"React hooks have become widespread since their introduction, and React-Redux recently introduced a new hooks API as an alternative to the traditional `connect()` HOC. Many React developers have questions about how these approaches differ.  We'll look at some of the strengths, weaknesses, and tradeoffs for both hooks and HOCs in general, and what this means for React-Redux users specifically as they decide how to write their applications.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2018/hacking-the-dom","categorySlug":null},"frontmatter":{"title":"Horror Stories From Hacking the DOM Into a Native Platform","category":null,"description":"You don’t go building something like React Native DOM without anticipating a few bruises along the way. Most of its development was a loop of hitting roadblocks and finding “creative” solutions around them. In this talk I’ll highlight some of of the largest roadblocks faced in React Native DOM’s development and the (occasionally absurd) solutions it took to overcome them such as Image’s tintColor prop, layout animations, the back handler, and more.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/large-codebase","categorySlug":null},"frontmatter":{"title":"I've Fallen Into a Large Codebase and I Can't Get Up!","category":null,"description":"Developers spend more time reading existing code than writing new code. Navigating codebases is especially important when joining new projects, or when investigating external libraries. Unfortunately, getting a full understanding of a system can be a slow process, especially in large codebases. Incomplete or inaccurate mental models contribute to bugs and slow development. Handmade architecture diagrams can help, but it is easy for these to drift out of sync from the code they originally described.\n\nAutomatically generated visualizations can help to untangle this complexity, but they aren't mainstream (yet). This talk will share a few existing tools and techniques for visualizing relationships in source code developed for other languages, such as Smalltalk and Java. We’ll examine how these \"old\" techniques could benefit modern Javascript/Typescript codebases. Next, we'll explore techniques currently available to React developers beyond the standard devtools, including automatic code annotation, state charts, annotated code maps, and network analysis tools to make sense of a file’s dependency tree. I'll close by sharing ideas for visual analysis from other fields that can be applied to understanding concepts in frontend code.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2018/introducing-undux","categorySlug":null},"frontmatter":{"title":"Introducing Undux – Simple Typesafe State Management for React","category":null,"description":"Listen to Boris Cherny discuss Undux at React Boston 2018!\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/jest-in-strict-mode","categorySlug":null},"frontmatter":{"title":"Jest in Strict Mode – Finding and Preventing Flaky Tests","category":null,"description":"Have you ever ran into flaky tests? How about tests which pass but should not have? This is a story about how we wen't about finding these dangerous tests in a suite of over 13,000 tests and what tooling we've built to prevent them from coming back. Hopefully our story and tooling can help you on your own team, big or small.\n"}}}]}},"pageContext":{"tag":"React Boston","currentPage":1,"coursesLimit":10,"coursesOffset":10,"prevPagePath":"/tag/react-boston","nextPagePath":"/tag/react-boston/page/2","hasPrevPage":true,"hasNextPage":true}},"staticQueryHashes":["784018950"]}