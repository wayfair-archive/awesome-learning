{"componentChunkName":"component---src-templates-tag-template-js","path":"/tag/react-hooks","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/guided-tour-of-react-hooks","categorySlug":null},"frontmatter":{"title":"A Guided Tour of React Hooks","category":null,"description":"Hooks offer a simple, concise way to write stateful React components without classes.\n\nIn this talk you'll learn about the \"magic\" behind how Hooks work and get to see a few examples of them in action. We'll cover the big four: useState, useEffect, useReducer, and useContext, plus how to write your very own custom hooks.\n\nYou may never want to write a class again.\n"}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/hooks-hocs-tradeoffs","categorySlug":null},"frontmatter":{"title":"Hooks, HOCS, and Tradeoffs","category":null,"description":"React hooks have become widespread since their introduction, and React-Redux recently introduced a new hooks API as an alternative to the traditional `connect()` HOC. Many React developers have questions about how these approaches differ.  We'll look at some of the strengths, weaknesses, and tradeoffs for both hooks and HOCs in general, and what this means for React-Redux users specifically as they decide how to write their applications.\n"}}},{"node":{"fields":{"slug":"/courses/React-Hooks/","categorySlug":"/category/js-fundamentals/"},"frontmatter":{"title":"React Hooks","category":"JS Fundamentals","description":"React Hooks introduce new ways to use React's APIs and features, while writing less code to do so! But what's the big deal? Why should you care about Hooks? Do you need to refactor all your old code? And why do I see so many people sharing hooks online? This course will introduce engineers to React Hooks, the differences between writing Class Components and Hooked Components, and some common patterns in writing components with Hooks."}}},{"node":{"fields":{"slug":"/tech-talks/react-boston-2019/rtl","categorySlug":null},"frontmatter":{"title":"Using React Testing Library to Write Stronger Tests","category":null,"description":"If you had to rewrite your tests when writing a hook in your React application, then you're writing tests wrong.\n\nreact-testing-library is what it sounds like, but more importantly, it encourages writing tests in the way that your end users will be using your components.\n\nIn this talk, I will first introduce react-testing-library, what it is, what it encourages, and what it does best. I'll then dive into how to effectively test a react component, first a smaller component, then a \"larger\" component with redux, i18n dependencies, etc., then I will show all of the different APIs that react-testing-library provides, and how to effectively use them. Then, I'll show how to write effective tests across an entire application (writing reusable, effective tests that are not brittle).\n"}}}]}},"pageContext":{"tag":"React Hooks","currentPage":0,"coursesLimit":10,"coursesOffset":0,"prevPagePath":"/tag/react-hooks","nextPagePath":"/tag/react-hooks/page/1","hasPrevPage":false,"hasNextPage":false}},"staticQueryHashes":["784018950"]}