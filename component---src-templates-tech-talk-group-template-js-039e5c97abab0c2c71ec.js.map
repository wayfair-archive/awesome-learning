{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack:///./src/components/TechTalkGroup/TechTalkGroup.js","webpack:///./src/templates/tech-talk-group-template.js"],"names":["ListItemText","props","ref","children","classes","className","_props$disableTypogra","disableTypography","_props$inset","inset","primaryProp","primary","primaryTypographyProps","secondaryProp","secondary","secondaryTypographyProps","other","dense","type","variant","component","display","color","root","multiline","flex","minWidth","marginTop","marginBottom","paddingLeft","name","useStyles","makeStyles","theme","sectionTitle","padding","spacing","sectionWrapper","techTalkCardItem","margin","relatedThemesTitle","TechTalkGroup","PropTypes","shape","description","string","isRequired","id","slug","title","useTheme","Box","m","maxWidth","breakpoints","values","lg","Button","Link","to","role","Typography","techTalkGroup","List","disablePadding","aria-label","techTalks","map","index","techTalk","frontmatter","truncatedDescription","length","substring","ListItem","disableGutters","key","TechTalkGroupTemplate","data","markdownRemark","fields","Layout","Page","allMarkdownRemark","nodes"],"mappings":"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","file":"component---src-templates-tech-talk-group-template-js-039e5c97abab0c2c71ec.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Typography,\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport {Link} from 'gatsby';\nimport {techTalkPropType} from '../TechTalk';\n\nconst useStyles = makeStyles((theme) => ({\n  sectionTitle: {\n    padding: theme.spacing(2, 0, 6),\n  },\n  sectionWrapper: {\n    display: 'block',\n    padding: theme.spacing(4, 0, 4),\n  },\n  techTalkCardItem: {\n    margin: theme.spacing(3, 0, 3),\n  },\n  relatedThemesTitle: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nconst TechTalkGroup = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  return (\n    <Box m=\"auto\" maxWidth={theme.breakpoints.values.lg}>\n      <Button component={Link} to=\"/tech-talks\" role=\"link\">\n        Back to Tech Talk Groups\n      </Button>\n      <Box className={classes.sectionWrapper}>\n        <Typography variant=\"h1\" className={classes.sectionTitle}>\n          {props.techTalkGroup.title}\n        </Typography>\n        <Typography variant=\"body1\">\n          {props.techTalkGroup.description}\n        </Typography>\n      </Box>\n      <List component=\"ol\" disablePadding aria-label=\"Available courses\">\n        {props.techTalks.map(({frontmatter: techTalk}, index) => {\n          const truncatedDescription =\n            techTalk.description.length > 500\n              ? `${techTalk.description.substring(0, 500)}...`\n              : techTalk.description;\n          return (\n            <ListItem\n              disableGutters\n              key={techTalk.title}\n              className={classes.sectionWrapper}\n            >\n              <ListItemText\n                primary={\n                  <Fragment>\n                    <Typography\n                      variant=\"h3\"\n                      className={classes.techTalkCardItem}\n                    >\n                      {index + 1}\n                      {'. '}\n                      {techTalk.title}\n                    </Typography>\n                  </Fragment>\n                }\n                secondary={\n                  <Typography variant=\"body1\">\n                    {truncatedDescription}\n                  </Typography>\n                }\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                component={Link}\n                to={techTalk.slug}\n                className={classes.techTalkCardItem}\n              >\n                Watch \"{techTalk.title}\"\n              </Button>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport const techTalkGroupPropType = PropTypes.shape({\n  description: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n});\n\nTechTalkGroup.propTypes = {\n  techTalks: PropTypes.arrayOf(techTalkPropType).isRequired,\n  techTalkGroup: techTalkGroupPropType.isRequired,\n};\n\nexport default TechTalkGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {graphql} from 'gatsby';\nimport Layout from '../components/shared/Layout';\nimport Page from '../components/shared/Page';\nimport TechTalkGroup, {\n  techTalkGroupPropType,\n} from '../components/TechTalkGroup';\nimport {techTalkPropType} from '../components/TechTalk';\n\nconst TechTalkGroupTemplate = ({data}) => {\n  const {title, description} = data.markdownRemark.frontmatter;\n\n  const {slug} = data.markdownRemark.fields;\n\n  return (\n    <Layout description={description} slug={slug} title={title}>\n      <Page>\n        <TechTalkGroup\n          techTalks={data.allMarkdownRemark.nodes}\n          techTalkGroup={data.markdownRemark.frontmatter}\n        />\n      </Page>\n    </Layout>\n  );\n};\n\nTechTalkGroupTemplate.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      nodes: PropTypes.arrayOf(techTalkPropType).isRequired,\n    }).isRequired,\n    markdownRemark: techTalkGroupPropType.isRequired,\n  }),\n};\n\nexport const query = graphql`\n  query TechTalkGroupBySlug($id: String!, $slug: String!) {\n    # Get information about the entire group\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      id\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        description\n        title\n      }\n    }\n    # Get all tech talks in this group\n    allMarkdownRemark(\n      filter: {frontmatter: {group: {eq: $id}, template: {eq: \"techtalk\"}}}\n      sort: {fields: frontmatter___title}\n    ) {\n      totalCount\n      nodes {\n        frontmatter {\n          description\n          slug\n          speakers {\n            name\n          }\n          title\n        }\n      }\n    }\n  }\n`;\n\nexport default TechTalkGroupTemplate;\n"],"sourceRoot":""}